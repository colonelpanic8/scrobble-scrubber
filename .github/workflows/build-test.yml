name: Build Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-builds:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            app/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libxdo-dev \
            libssl-dev

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          echo "macOS dependencies installation complete"

      - name: Install Dioxus CLI
        run: cargo install dioxus-cli --locked

      - name: Run tests
        working-directory: app
        run: cargo test

      - name: Check formatting
        working-directory: app
        run: cargo fmt --all --check

      - name: Run clippy
        working-directory: app
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Test build
        working-directory: app
        run: dx build --release --platform ${{ matrix.platform }}

      - name: Test bundle (Linux only for now)
        if: matrix.os == 'ubuntu-latest'
        working-directory: app
        run: |
          # Only test one bundle type to verify the process works
          dx bundle --release --platform linux --package-types deb