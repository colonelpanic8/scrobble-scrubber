name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'release/*'

permissions:
  contents: write
  packages: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build-all-platforms:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Cache Nix store
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build Linux bundle (primary)
        working-directory: app
        run: |
          nix develop --command dx bundle --release \
            --platform linux \
            --package-types deb

      - name: Build additional packages (native Linux only for now)
        working-directory: app
        run: |
          # AppImage requires additional setup - skip for now
          echo "Note: Cross-compilation to Windows/macOS requires complex toolchain setup"
          echo "Currently providing native Linux builds only"
          echo "Future enhancement: Add proper cross-compilation support"

      - name: List all artifacts
        working-directory: app
        run: |
          echo "Generated Linux artifacts:"
          find ../target/dx/scrobble-scrubber-app -name "*.deb" | sort
          echo "Also available:"
          ls -la ../target/dx/scrobble-scrubber-app/release/linux/app/

      - name: Upload Linux packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            target/dx/scrobble-scrubber-app/bundle/*/bundle/deb/*.deb
            target/dx/scrobble-scrubber-app/release/linux/app/scrobble-scrubber-app
          if-no-files-found: error

  create-release:
    needs: build-all-platforms
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Extract version from tag
        id: version
        run: |
          if [[ ${{ github.ref }} =~ refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*) ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "version=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Prepare release assets
        run: |
          echo "Downloaded artifacts:"
          find release-assets -type f | sort
          echo "Preparing release assets..."
          mkdir -p release-files
          find release-assets -name "*.deb" | while read file; do
            cp "$file" release-files/
          done
          find release-assets -name "scrobble-scrubber-app" -type f | while read file; do
            cp "$file" release-files/scrobble-scrubber-app-linux-x86_64
          done
          echo "Release files prepared:"
          ls -la release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Scrobble Scrubber v${{ steps.version.outputs.version }}"
          body: |
            ## Scrobble Scrubber v${{ steps.version.outputs.version }}

            Desktop application for managing and cleaning Last.fm scrobbles with support for rewrite rules, pending edits, and automated processing.

            ### Downloads (Linux)

            **Linux:**
            - `ScrobbleScrubberApp_*.deb` - Debian/Ubuntu package installer
            - `scrobble-scrubber-app-linux-x86_64` - Standalone binary

            ### Installation

            **Debian/Ubuntu:**
            ```bash
            sudo dpkg -i ScrobbleScrubberApp_*.deb
            ```

            **Standalone Binary:**
            ```bash
            chmod +x scrobble-scrubber-app-linux-x86_64
            ./scrobble-scrubber-app-linux-x86_64
            ```

            ### Features
            - System tray integration with dynamic status
            - Automated scrobble processing and cleanup
            - Configurable rewrite rules for track metadata
            - Pending edits management
            - Real-time status monitoring

            ### Cross-Platform Support
            This release provides native Linux builds. Cross-compilation support for Windows and macOS is planned for future releases.

            Built with Dioxus 0.7 and Rust.
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}