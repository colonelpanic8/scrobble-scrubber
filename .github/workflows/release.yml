name: Release

on:
  push:
    tags:
      - "v*"
    branches:
      - "release/*"

permissions:
  contents: write
  packages: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build-all-platforms:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Cache Nix store
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build Windows bundle
        working-directory: app
        run: |
          nix develop --command dx bundle --release \
            --platform windows \
            --package-types msi

      - name: Build macOS bundle
        working-directory: app
        run: |
          nix develop --command dx bundle --release \
            --platform macos \
            --package-types dmg

      - name: Build Linux bundle
        working-directory: app
        run: |
          nix develop --command dx bundle --release \
            --platform linux \
            --package-types deb

      - name: List all artifacts
        working-directory: app
        run: |
          echo "=== COMPLETE DIRECTORY LISTING FOR DEBUGGING ==="
          find ../target/dx/scrobble-scrubber-app -type f | sort
          echo ""
          echo "=== PLATFORM-SPECIFIC ARTIFACTS ==="
          echo "Windows artifacts:"
          find ../target/dx/scrobble-scrubber-app -name "*.exe" -o -name "*.msi" | sort
          echo "macOS artifacts:"  
          find ../target/dx/scrobble-scrubber-app -name "*.app" -o -name "*.dmg" | sort
          echo "Linux artifacts:"
          find ../target/dx/scrobble-scrubber-app -name "*.deb" -o -name "*app" -type f | sort

      - name: Upload Windows packages
        uses: actions/upload-artifact@v4
        with:
          name: windows-packages
          path: |
            target/dx/scrobble-scrubber-app/**/*.exe
            target/dx/scrobble-scrubber-app/**/*.msi
          if-no-files-found: warn

      - name: Upload macOS packages
        uses: actions/upload-artifact@v4
        with:
          name: macos-packages
          path: |
            target/dx/scrobble-scrubber-app/**/*.app
            target/dx/scrobble-scrubber-app/**/*.dmg
          if-no-files-found: warn

      - name: Upload Linux packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            target/dx/scrobble-scrubber-app/**/*.deb
            target/dx/scrobble-scrubber-app/**/scrobble-scrubber-app
          if-no-files-found: warn

  create-release:
    needs: build-all-platforms
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Extract version from tag
        id: version
        run: |
          if [[ ${{ github.ref }} =~ refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*) ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "version=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Prepare release assets
        run: |
          echo "Downloaded artifacts:"
          find release-assets -type f | sort
          echo "Preparing release assets..."
          mkdir -p release-files

          # Process Windows artifacts
          find release-assets -name "*.exe" | while read file; do
            cp "$file" release-files/scrobble-scrubber-app-windows.exe
          done
          find release-assets -name "*.msi" | while read file; do
            cp "$file" release-files/
          done

          # Process macOS artifacts
          find release-assets -name "*.app" -type d | while read file; do
            # Zip the .app bundle for distribution
            zip -r "release-files/scrobble-scrubber-app-macos.app.zip" "$file"
          done
          find release-assets -name "*.dmg" | while read file; do
            cp "$file" release-files/
          done

          # Process Linux artifacts
          find release-assets -name "*.deb" | while read file; do
            cp "$file" release-files/
          done
          find release-assets -name "scrobble-scrubber-app" -type f | while read file; do
            cp "$file" release-files/scrobble-scrubber-app-linux-x86_64
          done

          echo "Release files prepared:"
          ls -la release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Scrobble Scrubber v${{ steps.version.outputs.version }}"
          body: |
            ## Scrobble Scrubber v${{ steps.version.outputs.version }}

            Desktop application for managing and cleaning Last.fm scrobbles with support for rewrite rules, pending edits, and automated processing.

            ### Downloads

            **Windows:**
            - `scrobble-scrubber-app-windows.exe` - Windows executable

            **macOS:**
            - `scrobble-scrubber-app-macos.app.zip` - macOS application bundle

            **Linux:**
            - `ScrobbleScrubberApp_*.deb` - Debian/Ubuntu package installer
            - `scrobble-scrubber-app-linux-x86_64` - Standalone binary

            ### Installation

            **Windows:**
            Download and run `scrobble-scrubber-app-windows.exe` directly.

            **macOS:**
            Download and unzip `scrobble-scrubber-app-macos.app.zip`, then drag the `.app` to your Applications folder. You may need to right-click and select "Open" the first time due to macOS security settings.

            **Debian/Ubuntu:**
            ```bash
            sudo dpkg -i ScrobbleScrubberApp_*.deb
            ```

            **Linux Standalone Binary:**
            ```bash
            chmod +x scrobble-scrubber-app-linux-x86_64
            ./scrobble-scrubber-app-linux-x86_64
            ```

            ### Features
            - System tray integration with dynamic status
            - Automated scrobble processing and cleanup
            - Configurable rewrite rules for track metadata
            - Pending edits management
            - Real-time status monitoring

            ### Cross-Platform Support
            This release provides native builds for Windows, macOS, and Linux platforms.

            Built with Dioxus 0.7 and Rust.
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
