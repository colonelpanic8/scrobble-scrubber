name: Build Windows App

on:
  push:
    branches:
      - "test-app-windows"
      - "release/*"
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows-app:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust (Windows)
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust Cache (Windows)
        uses: Swatinem/rust-cache@v2
        with:
          key: windows-app

      - name: Install cargo-binstall (Windows)
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install Dioxus CLI (Windows)
        run: |
          echo "Attempting to install dioxus-cli with cargo-binstall..."
          cargo binstall --no-confirm dioxus-cli --verbose
          echo "Installation complete. Checking if dx was installed..."
          if (-not (Test-Path "$env:USERPROFILE\.cargo\bin\dx.exe")) {
            echo "dx.exe not found after binstall, trying cargo install as fallback..."
            cargo install dioxus-cli
          } else {
            echo "dx.exe found after binstall installation"
          }

      - name: Add cargo bin to PATH and verify dx installation
        run: |
          echo "$env:USERPROFILE\.cargo\bin" >> $env:GITHUB_PATH
          echo "Contents of cargo bin directory:"
          Get-ChildItem "$env:USERPROFILE\.cargo\bin" | Format-Table
          echo "Looking for dx executable:"
          if (Test-Path "$env:USERPROFILE\.cargo\bin\dx.exe") {
            echo "Found dx.exe, checking version:"
            & "$env:USERPROFILE\.cargo\bin\dx.exe" --version
          } elseif (Test-Path "$env:USERPROFILE\.cargo\bin\dx") {
            echo "Found dx (no extension), checking version:"
            & "$env:USERPROFILE\.cargo\bin\dx" --version
          } else {
            echo "dx executable not found in expected location!"
            exit 1
          }

      - name: Build app bundle (Windows)
        working-directory: app
        run: |
          # Try dx in PATH first, fallback to full path with .exe extension
          try {
            dx bundle --release --platform windows --package-types nsis
          } catch {
            Write-Host "dx not in PATH, trying full path with .exe..."
            if (Test-Path "$env:USERPROFILE\.cargo\bin\dx.exe") {
              & "$env:USERPROFILE\.cargo\bin\dx.exe" bundle --release --platform windows --package-types nsis
            } else {
              & "$env:USERPROFILE\.cargo\bin\dx" bundle --release --platform windows --package-types nsis
            }
          }

      - name: List artifacts
        working-directory: app
        run: |
          echo "=== WINDOWS APP ARTIFACTS ==="
          Get-ChildItem -Path ../target/dx/scrobble-scrubber-app -Recurse -File | Sort-Object Name | Format-Table

      - name: Upload app packages
        uses: actions/upload-artifact@v4
        with:
          name: windows-app-test
          path: |
            target/dx/scrobble-scrubber-app/**/*.exe
            target/dx/scrobble-scrubber-app/**/*.msi
          if-no-files-found: error