name: CLI Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build-cli-platforms:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-name: scrobble-scrubber
            asset-name: scrobble-scrubber-linux-x86_64
          - platform: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-name: scrobble-scrubber.exe
            asset-name: scrobble-scrubber-windows-x86_64.exe
          - platform: macos-intel
            os: macos-13
            target: x86_64-apple-darwin
            binary-name: scrobble-scrubber
            asset-name: scrobble-scrubber-macos-x86_64
          - platform: macos-arm
            os: macos-latest
            target: aarch64-apple-darwin
            binary-name: scrobble-scrubber
            asset-name: scrobble-scrubber-macos-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix (Linux only)
        if: matrix.platform == 'linux'
        uses: DeterminateSystems/nix-installer-action@main

      - name: Cache Nix store (Linux only)
        if: matrix.platform == 'linux'
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Setup Rust (Windows/macOS)
        if: matrix.platform == 'windows' || startsWith(matrix.platform, 'macos')
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Setup Rust Cache (Windows/macOS)
        if: matrix.platform == 'windows' || startsWith(matrix.platform, 'macos')
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform }}

      - name: Build CLI (Linux with Nix)
        if: matrix.platform == 'linux'
        run: |
          nix develop --command cargo build --release -p scrobble-scrubber-cli --target ${{ matrix.target }}

      - name: Build CLI (Windows/macOS)
        if: matrix.platform == 'windows' || startsWith(matrix.platform, 'macos')
        run: |
          cargo build --release -p scrobble-scrubber-cli --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p release-asset
          cp target/${{ matrix.target }}/release/${{ matrix.binary-name }} release-asset/${{ matrix.asset-name }}

      - name: Upload CLI binary
        uses: actions/upload-artifact@v4
        with:
          name: cli-binary-${{ matrix.platform }}
          path: release-asset/${{ matrix.asset-name }}
          if-no-files-found: error

  create-cli-release:
    needs: build-cli-platforms
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download CLI artifacts
        uses: actions/download-artifact@v4
        with:
          path: cli-assets

      - name: Extract version from tag
        id: version
        run: |
          if [[ ${{ github.ref }} =~ refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*) ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "version=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Prepare CLI release assets
        run: |
          echo "Downloaded CLI artifacts:"
          find cli-assets -type f | sort
          echo "Preparing CLI release assets..."
          mkdir -p cli-release-files
          
          # Copy all platform binaries from their respective artifact folders
          find cli-assets -name "scrobble-scrubber*" -type f -exec cp {} cli-release-files/ \;
          
          echo "CLI release files prepared:"
          ls -la cli-release-files/

      - name: Add CLI binaries to existing release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: cli-release-files/*
          append_body: true
          body: |
            
            ## CLI Binaries

            **Command-line interface binaries:**
            - `scrobble-scrubber-windows-x86_64.exe` - Windows CLI executable
            - `scrobble-scrubber-macos-x86_64` - macOS Intel CLI binary  
            - `scrobble-scrubber-macos-arm64` - macOS Apple Silicon CLI binary
            - `scrobble-scrubber-linux-x86_64` - Linux CLI binary

            **CLI Installation:**
            ```bash
            # Linux
            chmod +x scrobble-scrubber-linux-x86_64
            ./scrobble-scrubber-linux-x86_64 --help

            # macOS Intel
            chmod +x scrobble-scrubber-macos-x86_64
            ./scrobble-scrubber-macos-x86_64 --help

            # macOS Apple Silicon
            chmod +x scrobble-scrubber-macos-arm64
            ./scrobble-scrubber-macos-arm64 --help

            # Windows  
            scrobble-scrubber-windows-x86_64.exe --help
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}