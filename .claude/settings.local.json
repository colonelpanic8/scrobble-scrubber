{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(cargo check:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(cargo run:*)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo run --example list_album_tracks -- \"Exile on Main Street\" \"The Rolling Stones\")",
      "Bash(rg:*)",
      "Bash(direnv exec . cargo run --example debug_album_html -- \"Abbey Road\" \"The Beatles\")",
      "Bash(RUST_LOG=debug direnv exec . cargo run --example debug_album_html -- \"Abbey Road\" \"The Beatles\")",
      "Bash(RUST_LOG=debug direnv exec . cargo run --example debug_album_html -- \"Abbey Road\" \"The Beatles\" 2 >& 1)",
      "Bash(direnv exec:*)",
      "Bash(cargo clippy:*)",
      "Bash(cargo fmt:*)",
      "Bash(rustc:*)",
      "Bash(./test_regex)",
      "Bash(cargo clean:*)",
      "Bash(mkdir:*)",
      "Bash(cargo test:*)",
      "Bash(LASTFM_DEBUG_SAVE_RESPONSES=1 cargo run --example remove_remaster -- \"Neil Young\" 2 >& 1)",
      "Bash(RUST_LOG=warn LASTFM_DEBUG_SAVE_RESPONSES=1 cargo run --example remove_remaster -- \"The Velvet Underground\" 2 >& 1)",
      "Bash(RUST_LOG=warn LASTFM_DEBUG_SAVE_RESPONSES=1 timeout 30s cargo run --example remove_remaster -- \"The Velvet Underground\" 2 >& 1)",
      "Bash(cargo fix:*)",
      "Bash(LASTFM_DEBUG_SAVE_RESPONSES=1 timeout 10s cargo run --example remove_remaster -- \"The Velvet Underground\" 2>&1)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(ls:*)",
      "Bash(cargo:*)",
      "Bash(LASTFM_DEBUG_SAVE_RESPONSES=1 cargo run --example list_recent_tracks 60)",
      "Bash(find:*)",
      "Bash(cp:*)",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(sed:*)",
      "Bash(done)",
      "Bash(if ! grep -q \"\\.next()\\.await\" \"$file\")",
      "Bash(then)",
      "Bash(fi)",
      "WebFetch(domain:docs.rs)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(cat:*)",
      "Bash(SCROBBLE_SCRUBBER_LASTFM_USERNAME=test_user SCROBBLE_SCRUBBER_LASTFM_PASSWORD=test_pass SCROBBLE_SCRUBBER_PROVIDERS_ENABLE_OPENAI=true SCROBBLE_SCRUBBER_PROVIDERS_OPENAI_API_KEY=sk-test123 cargo run -- --help)",
      "Bash(echo:*)",
      "Bash(just readme)",
      "Bash(just clippy:*)",
      "Bash(just checks)",
      "Bash(wasm-pack:*)",
      "Bash(rustup target:*)",
      "Bash(rustup which:*)",
      "Bash(PATH=\"$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin:$PATH\" wasm-pack build --target web --out-dir pkg)",
      "Bash(npm run build:*)",
      "Bash(direnv reload:*)",
      "Bash(rustup:*)",
      "Bash(exit)",
      "Bash(export:*)",
      "Bash(npm run dev:*)",
      "Bash(npm install:*)",
      "Bash(pkill:*)",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(npm create:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm run tauri:*)",
      "Bash(trunk build:*)",
      "Bash(just fmt-check:*)",
      "Bash(./target/debug/scrobble-scrubber:*)",
      "Bash(timeout:*)",
      "Bash(dx build:*)",
      "Bash(nix develop:*)",
      "Bash(./verify_fix)",
      "Bash(git rebase:*)",
      "Bash(RUST_LOG=trace ./target/debug/scrobble-scrubber set-anchor --tracks 5)",
      "Bash(RUST_LOG=trace ./target/debug/scrobble-scrubber once --dry-run --max-tracks 3)",
      "Bash(RUST_LOG=trace ./target/debug/scrobble-scrubber once --dry-run --max-tracks 1)",
      "Bash(RUST_LOG=scrobble_scrubber=trace ./target/debug/scrobble-scrubber once --dry-run --max-tracks 1)",
      "Bash(RUST_LOG=scrobble_scrubber=trace ./target/debug/scrobble-scrubber once --dry-run --max-tracks 2)",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- once --dry-run --max-tracks 10)",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- once --dry-run --max-tracks 20)",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- last-n --tracks 100 --dry-run)",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- once --dry-run --max-tracks 5)",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- once --dry-run --max-tracks 50)",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- once --dry-run --max-tracks 5 --set-anchor-timestamp \"2025-07-22T07:00:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- artist --name \"The Beatles\" --dry-run)",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- once --dry-run --max-tracks 10 --set-anchor-timestamp \"2025-07-22T07:00:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=trace cargo run -p scrobble-scrubber-cli -- once --dry-run --max-tracks 75 --set-anchor-timestamp \"2025-07-22T07:00:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=info cargo run -p scrobble-scrubber-cli -- once --dry-run --set-anchor-timestamp \"2025-07-22T07:00:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=info cargo run -p scrobble-scrubber-cli -- once --set-anchor-timestamp \"2025-07-22T07:00:00Z\")",
      "Bash(/dev/null)",
      "WebFetch(domain:crates.io)",
      "Bash(git -C /home/imalison/Projects/lastfm-edit status)",
      "Bash(git -C /home/imalison/Projects/lastfm-edit add .)",
      "Bash(git -C /home/imalison/Projects/lastfm-edit commit -m \"Add album_artist support and smart metadata lookup for edits\n\n- Add album_artist field to Track structure\n- Change ScrobbleEdit to use Option<String> for original metadata fields  \n- Implement automatic metadata lookup for missing original values\n- Add with_minimal_info constructor for easy edit creation\n- Extract album_artist information from recent scrobbles HTML forms\n- Version bump to 0.7.0\")",
      "Bash(git -C /home/imalison/Projects/lastfm-edit commit -m \"Add comprehensive test for album artist functionality\n\n- Add test_album_artist.rs binary to verify metadata extraction\n- Make find_scrobble_by_timestamp public for testing  \n- Update Cargo.toml with test binary configuration\n- Fix clippy warnings in client.rs\")",
      "Bash(git pull:*)",
      "Bash(git branch:*)",
      "Bash(RUST_LOG=debug dx build 2 >& 1)",
      "Bash(RUST_BACKTRACE=1 cargo build --features=desktop 2 >& 1)",
      "Bash(RUST_BACKTRACE=1 RUST_LOG=debug dx build --verbose 2 >& 1)",
      "Bash(/tmp:*)",
      "Bash(true)",
      "Bash(RUST_LOG=trace dx build)",
      "Bash(RUST_LOG=debug dx build)",
      "Bash(RUST_LOG=debug cargo run --bin scrobble-scrubber-cli -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T18:00:00Z\")",
      "Bash(RUST_LOG=debug cargo run --bin scrobble-scrubber -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T18:00:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=debug cargo run --bin scrobble-scrubber -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T20:00:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=debug cargo run --bin scrobble-scrubber -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-24T00:00:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=debug cargo run --bin scrobble-scrubber -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T08:40:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=debug cargo run --bin scrobble-scrubber -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T08:30:00Z\")",
      "Bash(RUST_LOG=scrobble_scrubber=debug cargo run --bin scrobble-scrubber -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T08:30:00Z\" --dry-run)",
      "Bash(RUST_LOG=scrobble_scrubber=debug cargo run --bin scrobble-scrubber -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T08:37:00Z\" --dry-run)",
      "Bash(RUST_LOG=scrobble_scrubber::musicbrainz_provider=trace cargo run --bin scrobble-scrubber -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T08:37:00Z\" --dry-run)",
      "Bash(curl:*)",
      "Bash(RUST_LOG=scrobble_scrubber=debug cargo run -- --provider musicbrainz once --set-anchor-timestamp \"2025-07-25T08:37:00Z\" --dry-run)",
      "Bash(RUST_LOG=info cargo run -- --provider musicbrainz once --dry-run 2 >& 1)",
      "Bash(RUST_LOG=debug timeout 5 cargo run -- --provider musicbrainz once --dry-run 2 >& 1)",
      "Bash(RUST_LOG=debug cargo run -- --provider musicbrainz once --dry-run 2 >& 1)",
      "Bash(RUST_LOG=debug cargo run -- --provider musicbrainz once --dry-run)",
      "Bash(RUST_LOG=info cargo run -- --provider musicbrainz show-cache --limit 1 2 >& 1)",
      "Bash(RUST_LOG=debug timeout 10 cargo run -- --provider musicbrainz once --dry-run 2 >& 1)",
      "Bash(RUST_LOG=info cargo run -- show-cache --limit 1 2 >& 1)",
      "Bash(RUST_LOG=info cargo run --bin scrobble-scrubber -- show-recent-tracks --limit 1)",
      "Bash(./explore_musicbrainz)",
      "WebFetch(domain:dioxuslabs.github.io)",
      "Bash(./cli/target/debug/scrobble-scrubber --help)",
      "Bash(do cargo run --bin scrobble-scrubber -- extend-cache --limit 1000)",
      "Bash(do echo \"=== Run $i ===\")",
      "Bash(dx run:*)",
      "Bash(RUST_LOG=scrobble_scrubber=info ./target/debug/scrobble-scrubber --provider musicbrainz scrubber once --set-anchor-timestamp \"2025-06-01T00:00:00Z\" --require-confirmation --dry-run)",
      "Bash(lastfm-edit search:*)",
      "Bash(lastfm-edit edit:*)",
      "Bash(source:*)",
      "Bash(git checkout:*)",
      "Bash(gh workflow run:*)",
      "Bash(RUST_LOG=scrobble_scrubber=info,lastfm_edit=debug cargo run --bin scrobble-scrubber -- scrubber search --limit 1 -q remaster)",
      "Bash(RUST_LOG=scrobble_scrubber=info cargo run --bin scrobble-scrubber -- scrubber search --limit 1 -q remaster)",
      "Bash(RUST_LOG=scrobble_scrubber=info cargo run --bin scrobble-scrubber -- scrubber search --limit 3 -q \"beatles\")",
      "Bash(lastfm-edit:*)",
      "Bash(lastfm-edit:*)",
      "Bash(./add_album_rules)",
      "Bash(RUST_LOG=info cargo run -- --state-file test_new_user.db rules show)",
      "Bash(RUST_LOG=info ./target/release/scrobble-scrubber --state-file test_embedded.db rules show)",
      "Bash(just generate-icons:*)",
      "WebFetch(domain:dioxuslabs.com)",
      "Bash(dx bundle)",
      "Bash(RUST_BACKTRACE=1 dx bundle)",
      "Bash(dx bundle:*)",
      "Bash(bash:*)",
      "Bash(nix search:*)"
    ],
    "deny": [
      "Bash(dx serve:*)"
    ]
  }
}